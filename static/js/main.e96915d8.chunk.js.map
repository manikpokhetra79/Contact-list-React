{"version":3,"sources":["components/UpdateContact.js","components/Contact.js","components/ContactForm.js","components/Header.js","components/ContactList.js","helpers/Urls.js","containers/App.js","reportWebVitals.js","index.js"],"names":["UpdateContact","props","toggleAlert","val","setState","showAlert","setTimeout","handleInputChange","field","value","handleAddressInputChange","address","state","onFormSubmit","e","preventDefault","userId","user","id","name","email","phone","city","fetch","method","body","JSON","stringify","headers","then","response","json","console","log","updateContact","hideForm","this","Container","className","Form","style","width","Row","Alert","variant","Button","onClick","Group","as","Col","controlId","Label","Control","type","placeholder","onChange","target","Component","Contact","hideUpdateContactForm","showUpdateForm","hideCard","handleContactEdit","handleDeleteContact","url","res","status","deleteContact","editContact","ColoredLine","color","backgroundColor","height","Card","border","Body","Title","ListGroup","ListGroupItem","React","ContactForm","formSubmit","Header","ContactList","toggleAddForm","showAddform","handleformSubmit","users","lastId","newArray","push","window","scrollTo","top","document","documentElement","scrollHeight","behavior","handleUpdateContact","lastDeletedIndex","length","diff","filteredItems","filter","item","size","xs","md","lg","map","CardGroup","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.e96915d8.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { Form, Button, Row, Col, Container, Alert } from 'react-bootstrap';\r\nclass UpdateContact extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      name: '',\r\n      email: '',\r\n      phone: '',\r\n      address: {\r\n        city: '',\r\n      },\r\n      showAlert: false,\r\n    };\r\n  }\r\n  toggleAlert = (val) => {\r\n    this.setState({\r\n      showAlert: val,\r\n    });\r\n    setTimeout(() => {\r\n      this.setState({\r\n        showAlert: !val,\r\n      });\r\n    }, 6000);\r\n  };\r\n  handleInputChange = (field, value) => {\r\n    this.setState({\r\n      [field]: value,\r\n    });\r\n  };\r\n  handleAddressInputChange = (field, value) => {\r\n    // handle all address fields\r\n    this.setState({\r\n      address: {\r\n        ...this.state.address, //spread previous value\r\n        [field]: value, //update new value of field\r\n      },\r\n    });\r\n  };\r\n  onFormSubmit = (e) => {\r\n    e.preventDefault();\r\n    const userId = this.props.user.id;\r\n    let url = `https://jsonplaceholder.typicode.com/users/1`;\r\n    const { name, email, phone, address } = this.state;\r\n    if (name && email && phone && address.city) {\r\n      fetch(url, {\r\n        method: 'PUT',\r\n        body: JSON.stringify({\r\n          name,\r\n          email,\r\n          phone,\r\n          address,\r\n          userId,\r\n        }),\r\n        headers: {\r\n          'Content-type': 'application/json; charset=UTF-8',\r\n        },\r\n      })\r\n        .then((response) => response.json())\r\n        .then((user) => {\r\n          console.log(user);\r\n          // call update contact function\r\n          this.props.updateContact(user);\r\n          this.props.hideForm();\r\n        });\r\n    } else {\r\n      this.toggleAlert(true);\r\n    }\r\n  };\r\n  render() {\r\n    const { email, name, phone, address } = this.props.user;\r\n    const { showAlert } = this.state;\r\n    // console.log(this.props);\r\n    return (\r\n      <Container className=\"m-3\">\r\n        <Form\r\n          className=\"border border-secondary p-4 border-3 rounded\"\r\n          style={{ width: '22rem' }}\r\n        >\r\n          <Row>\r\n            {showAlert && (\r\n              <Alert variant=\"info\">\r\n                Please fill in new or existing records...\r\n              </Alert>\r\n            )}\r\n          </Row>\r\n          {/* email username  phone */}\r\n          <Button\r\n            variant=\"danger\"\r\n            className=\"my-3\"\r\n            onClick={this.props.hideForm}\r\n          >\r\n            Close Form\r\n          </Button>\r\n          <Row>\r\n            {' '}\r\n            <Form.Group as={Col} controlId=\"formGridName\">\r\n              <Form.Label>Full Name</Form.Label>\r\n              <Form.Control\r\n                type=\"text\"\r\n                placeholder={name}\r\n                onChange={(e) => this.handleInputChange('name', e.target.value)}\r\n              />\r\n            </Form.Group>\r\n          </Row>\r\n          <Row>\r\n            <Form.Group as={Col} controlId=\"formGridEmail\">\r\n              <Form.Label>Email</Form.Label>\r\n              <Form.Control\r\n                type=\"email\"\r\n                placeholder={email}\r\n                onChange={(e) =>\r\n                  this.handleInputChange('email', e.target.value)\r\n                }\r\n              />\r\n            </Form.Group>\r\n          </Row>\r\n          <Row className=\"mb-2\">\r\n            <Form.Group as={Col} controlId=\"formGridPhonenumber\">\r\n              <Form.Label>Phone Number</Form.Label>\r\n              <Form.Control\r\n                type=\"text\"\r\n                placeholder={phone}\r\n                onChange={(e) =>\r\n                  this.handleInputChange('phone', e.target.value)\r\n                }\r\n              />\r\n            </Form.Group>\r\n          </Row>\r\n          <Row className=\"mb-4\">\r\n            <Form.Group as={Col} controlId=\"formGridCity\">\r\n              <Form.Label>City</Form.Label>\r\n              <Form.Control\r\n                type=\"text\"\r\n                placeholder={address.city}\r\n                onChange={(e) =>\r\n                  this.handleAddressInputChange('city', e.target.value)\r\n                }\r\n              />\r\n            </Form.Group>\r\n          </Row>\r\n          <Button variant=\"primary\" type=\"submit\" onClick={this.onFormSubmit}>\r\n            UpdateContact\r\n          </Button>\r\n        </Form>\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\nexport default UpdateContact;\r\n","import React from 'react';\r\nimport { Button, Card, ListGroupItem, ListGroup, Row } from 'react-bootstrap';\r\nimport UpdateContact from './UpdateContact';\r\nclass Contact extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      showUpdateForm: false,\r\n      hideCard: false,\r\n    };\r\n  }\r\n  //hide update form\r\n  hideUpdateContactForm = () => {\r\n    this.setState({\r\n      showUpdateForm: false,\r\n      hideCard: false,\r\n    });\r\n  };\r\n  handleContactEdit = () => {\r\n    this.setState({\r\n      showUpdateForm: true,\r\n      hideCard: true,\r\n    });\r\n  };\r\n  handleDeleteContact = (userId) => {\r\n    let url = `https://jsonplaceholder.typicode.com/users/${userId}`;\r\n    fetch(url, {\r\n      method: 'DELETE',\r\n    }).then((res) => {\r\n      if (res.status === 200) {\r\n        this.props.deleteContact(userId);\r\n      }\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { user, editContact } = this.props;\r\n    const { id, name, email, phone, address } = user;\r\n    const { showUpdateForm, hideCard } = this.state;\r\n    const ColoredLine = ({ color }) => (\r\n      <hr\r\n        style={{\r\n          color: color,\r\n          backgroundColor: color,\r\n          height: 5,\r\n        }}\r\n      />\r\n    );\r\n    return (\r\n      <div>\r\n        <Row>\r\n          {' '}\r\n          {showUpdateForm ? (\r\n            <UpdateContact\r\n              updateContact={editContact}\r\n              user={user}\r\n              hideForm={this.hideUpdateContactForm}\r\n            />\r\n          ) : null}\r\n        </Row>\r\n        {!hideCard && (\r\n          <Row>\r\n            <Card\r\n              style={{ width: '22rem' }}\r\n              className=\"mt-3\"\r\n              border=\"secondary\"\r\n            >\r\n              <Card.Body>\r\n                <Card.Title>Contact Card</Card.Title>\r\n              </Card.Body>\r\n              <ColoredLine color=\"red\" />\r\n              <Card.Body>\r\n                <Button variant=\"success\" onClick={this.handleContactEdit}>\r\n                  Edit\r\n                </Button>{' '}\r\n                <Button\r\n                  variant=\"danger\"\r\n                  // onClick={() => deleteContact(user)}\r\n                  onClick={() => this.handleDeleteContact(id)}\r\n                >\r\n                  Delete\r\n                </Button>\r\n              </Card.Body>\r\n              <ListGroup className=\"list-group-flush\">\r\n                <ListGroupItem>Id :{id}</ListGroupItem>\r\n                <ListGroupItem>Name: {name}</ListGroupItem>\r\n                <ListGroupItem>Email :{email}</ListGroupItem>\r\n                <ListGroupItem>Phone:{phone}</ListGroupItem>\r\n                <ListGroupItem>Address :{address.city}</ListGroupItem>\r\n              </ListGroup>\r\n            </Card>\r\n          </Row>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Contact;\r\n","import React, { Component } from 'react';\r\nimport { Form, Button, Row, Col, Container, Alert } from 'react-bootstrap';\r\nclass ContactForm extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      name: '',\r\n      email: '',\r\n      phone: '',\r\n      address: {\r\n        city: '',\r\n      },\r\n      showAlert: false,\r\n    };\r\n  }\r\n  toggleAlert = (val) => {\r\n    this.setState({\r\n      showAlert: val,\r\n    });\r\n  };\r\n  handleInputChange = (field, value) => {\r\n    this.setState({\r\n      [field]: value,\r\n    });\r\n  };\r\n  handleAddressInputChange = (field, value) => {\r\n    // handle all address fields\r\n    this.setState({\r\n      address: {\r\n        ...this.state.address, //spread previous value\r\n        [field]: value, //update new value of field\r\n      },\r\n    });\r\n  };\r\n  onFormSubmit = (e) => {\r\n    e.preventDefault();\r\n    const { name, email, phone, address } = this.state;\r\n    if (name && email && phone && address.city) {\r\n      fetch('https://jsonplaceholder.typicode.com/users', {\r\n        method: 'POST',\r\n        body: JSON.stringify({\r\n          name,\r\n          email,\r\n          phone,\r\n          address,\r\n        }),\r\n        headers: {\r\n          'Content-type': 'application/json; charset=UTF-8',\r\n        },\r\n      })\r\n        .then((response) => response.json())\r\n        .then((user) => {\r\n          console.log(user);\r\n          //callback function for app component to add new user to the users array for rendering new data\r\n          this.props.formSubmit(user);\r\n        });\r\n    } else {\r\n      this.toggleAlert(true);\r\n    }\r\n  };\r\n  render() {\r\n    const { showAlert } = this.state;\r\n    return (\r\n      <Container>\r\n        {' '}\r\n        <Form className=\"border border-secondary p-4 border-5 rounded\">\r\n          <Row>\r\n            {showAlert && (\r\n              <Alert variant=\"danger\">Please fill in all the details...</Alert>\r\n            )}\r\n          </Row>\r\n          {/* email username  phone */}\r\n          <Row className=\"mb-3\">\r\n            {' '}\r\n            <Form.Group as={Col} controlId=\"formGridName\">\r\n              <Form.Label>Full Name</Form.Label>\r\n              <Form.Control\r\n                type=\"text\"\r\n                placeholder=\"Enter Full Name\"\r\n                onChange={(e) => this.handleInputChange('name', e.target.value)}\r\n              />\r\n            </Form.Group>\r\n            <Form.Group as={Col} controlId=\"formGridEmail\">\r\n              <Form.Label>Email</Form.Label>\r\n              <Form.Control\r\n                type=\"email\"\r\n                placeholder=\"Enter email\"\r\n                onChange={(e) =>\r\n                  this.handleInputChange('email', e.target.value)\r\n                }\r\n              />\r\n            </Form.Group>\r\n          </Row>\r\n          <Row className=\"mb-2\">\r\n            <Form.Group as={Col} controlId=\"formGridPhonenumber\">\r\n              <Form.Label>Phone Number</Form.Label>\r\n              <Form.Control\r\n                type=\"number\"\r\n                placeholder=\"Enter Phone Number\"\r\n                onChange={(e) =>\r\n                  this.handleInputChange('phone', e.target.value)\r\n                }\r\n              />\r\n            </Form.Group>\r\n          </Row>\r\n\r\n          {/* email username  phone */}\r\n          <Row className=\"mb-4\">\r\n            <Form.Group as={Col} controlId=\"formGridCity\">\r\n              <Form.Label>City</Form.Label>\r\n              <Form.Control\r\n                type=\"text\"\r\n                placeholder=\"Enter City\"\r\n                onChange={(e) =>\r\n                  this.handleAddressInputChange('city', e.target.value)\r\n                }\r\n              />\r\n            </Form.Group>\r\n          </Row>\r\n\r\n          <Button variant=\"primary\" type=\"submit\" onClick={this.onFormSubmit}>\r\n            Add Contact\r\n          </Button>\r\n        </Form>\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ContactForm;\r\n","import React, { Component } from 'react';\r\n\r\nclass Header extends Component {\r\n  render() {\r\n    return <h1 className=\"text-center text-success p-3\">Contact Manager</h1>;\r\n  }\r\n}\r\nexport default Header;\r\n","import React from 'react';\r\nimport { Container, Button, Row, CardGroup, Col } from 'react-bootstrap';\r\n\r\nimport Contact from './Contact';\r\nimport ContactForm from './ContactForm';\r\nimport { userApi } from '../helpers/Urls';\r\nimport Header from './Header';\r\n\r\nclass ContactList extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      users: [],\r\n      showAddform: false,\r\n      lastId: 10,\r\n      lastDeletedIndex: -1,\r\n    };\r\n  }\r\n  componentDidMount() {\r\n    fetch(userApi)\r\n      .then((res) => res.json())\r\n      .then((users) => {\r\n        console.log(users);\r\n\r\n        this.setState({\r\n          users: users,\r\n        });\r\n      });\r\n  }\r\n\r\n  //show/hide add form\r\n  toggleAddForm = (val) => {\r\n    this.setState({\r\n      showAddform: val,\r\n    });\r\n  };\r\n\r\n  // handle adding new contact\r\n  handleformSubmit = (user) => {\r\n    const { users } = this.state;\r\n    // correct the id of user\r\n    user.id = this.state.lastId + 1;\r\n    let newArray = [...users];\r\n    newArray.push(user);\r\n    this.setState({\r\n      showAddform: false,\r\n      lastId: user.id,\r\n      users: [...newArray],\r\n    });\r\n    // scroll to the bottom\r\n    window.scrollTo({\r\n      top: document.documentElement.scrollHeight,\r\n      behavior: 'auto',\r\n    });\r\n  };\r\n\r\n  //handle update contact\r\n  handleUpdateContact = (user) => {\r\n    const { users, lastDeletedIndex } = this.state;\r\n    user.id = user.userId;\r\n    let newArray = [...users];\r\n    let length = newArray.length;\r\n    let { lastId } = this.state;\r\n    let diff = lastId - length;\r\n    if (user.id <= lastDeletedIndex) {\r\n      newArray[user.id - 1] = user;\r\n    } else {\r\n      newArray[user.id - diff - 1] = user;\r\n    }\r\n    console.log(newArray);\r\n    this.setState({\r\n      users: newArray,\r\n    });\r\n  };\r\n\r\n  // handle delete contact\r\n  handleDeleteContact = (userId) => {\r\n    const { users } = this.state;\r\n\r\n    const filteredItems = users.filter((item) => item.id !== userId);\r\n\r\n    //update users array\r\n    this.setState({\r\n      users: filteredItems,\r\n      lastDeletedIndex: userId - 1,\r\n    });\r\n  };\r\n  render() {\r\n    const { users, showAddform } = this.state;\r\n    console.log(users);\r\n    return (\r\n      <>\r\n        <Container>\r\n          <Row>\r\n            {' '}\r\n            <Header />\r\n          </Row>\r\n          <Row className=\"d-grid gap-2 mb-3\">\r\n            <Button\r\n              variant=\"primary\"\r\n              size=\"lg\"\r\n              onClick={() => this.toggleAddForm(!showAddform)}\r\n            >\r\n              Show / Hide Contact Form\r\n            </Button>\r\n          </Row>\r\n          <Row className=\"mb-3\">\r\n            {showAddform ? (\r\n              <ContactForm formSubmit={this.handleformSubmit} />\r\n            ) : null}\r\n          </Row>\r\n\r\n          <Row xs={1} md={1} lg={2} className=\"g-3 m-auto\">\r\n            {users.map((user) => (\r\n              <Col>\r\n                <CardGroup>\r\n                  <Contact\r\n                    key={user}\r\n                    user={user}\r\n                    deleteContact={this.handleDeleteContact}\r\n                    editContact={this.handleUpdateContact}\r\n                  />\r\n                </CardGroup>\r\n              </Col>\r\n            ))}\r\n          </Row>\r\n        </Container>\r\n      </>\r\n    );\r\n  }\r\n}\r\nexport default ContactList;\r\n","export const userApi = 'https://jsonplaceholder.typicode.com/users';\r\n","import React, { Component } from 'react';\nimport ContactList from '../components/ContactList';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <ContactList />\n      </div>\n    );\n  }\n}\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport App from './containers/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}